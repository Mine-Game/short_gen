// –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è UTM —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è npx prisma db push

const fs = require('fs');
const path = require('path');

const files = [
  {
    path: 'app/api/dashboard/links/route.ts',
    search: `select: {
        id: true,
        originalUrl: true,
        shortId: true,
        clicks: true,
        createdAt: true,
        updatedAt: true
      }`,
    replace: `select: {
        id: true,
        originalUrl: true,
        shortId: true,
        clicks: true,
        utmSource: true,
        utmMedium: true,
        utmCampaign: true,
        utmTerm: true,
        utmContent: true,
        createdAt: true,
        updatedAt: true
      }`
  },
  {
    path: 'app/api/shorten/route.ts',
    search: `shortLink = await prisma.shortLink.create({
        data: {
          originalUrl: parsed.toString(),
          shortId,
          userId: user.id
        }
      })`,
    replace: `const linkData = {
        originalUrl: parsed.toString(),
        shortId,
        userId: user.id
      }

      // –î–æ–±–∞–≤–ª—è–µ–º UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (utmParams && typeof utmParams === 'object') {
        if (utmParams.utm_source) linkData.utmSource = utmParams.utm_source
        if (utmParams.utm_medium) linkData.utmMedium = utmParams.utm_medium
        if (utmParams.utm_campaign) linkData.utmCampaign = utmParams.utm_campaign
        if (utmParams.utm_term) linkData.utmTerm = utmParams.utm_term
        if (utmParams.utm_content) linkData.utmContent = utmParams.utm_content
      }

      shortLink = await prisma.shortLink.create({
        data: linkData
      })`
  },
  {
    path: 'app/[id]/route.ts',
    search: `const shortLink = await prisma.shortLink.findUnique({
      where: { shortId }
    })`,
    replace: `const shortLink = await prisma.shortLink.findUnique({
      where: { shortId },
      select: {
        id: true,
        originalUrl: true,
        utmSource: true,
        utmMedium: true,
        utmCampaign: true,
        utmTerm: true,
        utmContent: true
      }
    })`
  },
  {
    path: 'app/[id]/route.ts',
    search: `// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL (UTM –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏)
    return NextResponse.redirect(shortLink.originalUrl)`,
    replace: `// –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π URL —Å UTM –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    let finalUrl = shortLink.originalUrl
    
    try {
      const originalURL = new URL(shortLink.originalUrl)
      
      // –î–æ–±–∞–≤–ª—è–µ–º UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (shortLink.utmSource) originalURL.searchParams.set('utm_source', shortLink.utmSource)
      if (shortLink.utmMedium) originalURL.searchParams.set('utm_medium', shortLink.utmMedium)
      if (shortLink.utmCampaign) originalURL.searchParams.set('utm_campaign', shortLink.utmCampaign)
      if (shortLink.utmTerm) originalURL.searchParams.set('utm_term', shortLink.utmTerm)
      if (shortLink.utmContent) originalURL.searchParams.set('utm_content', shortLink.utmContent)
      
      finalUrl = originalURL.toString()
    } catch (e) {
      console.error('Error adding UTM parameters:', e)
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
      finalUrl = shortLink.originalUrl
    }

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π URL
    return NextResponse.redirect(finalUrl)`
  }
];

console.log('üîÑ Restoring UTM functionality...');

files.forEach(({ path: filePath, search, replace }) => {
  try {
    const fullPath = path.join(__dirname, filePath);
    const content = fs.readFileSync(fullPath, 'utf8');
    
    if (content.includes(search)) {
      const newContent = content.replace(search, replace);
      fs.writeFileSync(fullPath, newContent);
      console.log(`‚úÖ Updated ${filePath}`);
    } else {
      console.log(`‚ö†Ô∏è Pattern not found in ${filePath} - file may already be updated`);
    }
  } catch (error) {
    console.error(`‚ùå Error updating ${filePath}:`, error.message);
  }
});

console.log('‚úÖ UTM functionality restored! Please restart your development server.');
