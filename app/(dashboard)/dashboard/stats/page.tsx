'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../../../components/ui/card'
import { Select } from '../../../../components/ui/select'
import StatCard from '../../../../components/StatCard'
import SimpleChart from '../../../../components/SimpleChart'
import ProgressBar from '../../../../components/ProgressBar'

interface AnalyticsData {
  overview: {
    totalClicks: number
    uniqueClicks: number
    repeatClicks: number
    uniqueRate: number
  }
  geography: {
    countries: Array<{ country: string; clicks: number }>
  }
  trafficSources: {
    categories: Array<{ source: string; count: number }>
    referers: Array<{ domain: string; clicks: number }>
  }
  utm: {
    campaigns: Array<{ campaign: string; source: string; medium: string; clicks: number }>
  }
  technology: {
    browsers: Array<{ browser: string; clicks: number }>
    devices: Array<{ device: string; clicks: number }>
  }
  timeline: Array<{ date: string; clicks: number; uniqueClicks: number }>
  links: Array<{ id: string; shortId: string; originalUrl: string; clicks: number }>
}

export default function StatsPage() {
  const [data, setData] = useState<AnalyticsData | null>(null)
  const [loading, setLoading] = useState(true)
  const [period, setPeriod] = useState('30')
  const [selectedLink, setSelectedLink] = useState('')

  useEffect(() => {
    fetchAnalytics()
  }, [period, selectedLink])

  const fetchAnalytics = async () => {
    try {
      setLoading(true)
      const params = new URLSearchParams({ period })
      if (selectedLink) params.set('linkId', selectedLink)
      
      const response = await fetch(`/api/dashboard/analytics?${params}`)
      if (response.ok) {
        const analyticsData = await response.json()
        setData(analyticsData)
      }
    } catch (error) {
      console.error('Error fetching analytics:', error)
    } finally {
      setLoading(false)
    }
  }

  if (loading) {
    return (
      <div className="space-y-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h1>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...</p>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {[...Array(4)].map((_, i) => (
            <div key={i} className="animate-pulse">
              <div className="bg-gray-200 h-32 rounded-xl"></div>
            </div>
          ))}
        </div>
      </div>
    )
  }

  if (!data) {
    return (
      <div className="space-y-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h1>
          <p className="text-gray-600">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-gray-900 mb-2">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h1>
        <p className="text-gray-600">–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ –≤–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º</p>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="flex flex-wrap gap-4">
        <div className="flex flex-col">
          <label className="text-sm font-medium text-gray-700 mb-1">–ü–µ—Ä–∏–æ–¥</label>
          <Select value={period} onChange={(e) => setPeriod(e.target.value)}>
            <option value="1">–°–µ–≥–æ–¥–Ω—è</option>
            <option value="7">7 –¥–Ω–µ–π</option>
            <option value="30">30 –¥–Ω–µ–π</option>
            <option value="90">90 –¥–Ω–µ–π</option>
          </Select>
        </div>
        
        <div className="flex flex-col">
          <label className="text-sm font-medium text-gray-700 mb-1">–°—Å—ã–ª–∫–∞</label>
          <Select value={selectedLink} onChange={(e) => setSelectedLink(e.target.value)}>
            <option value="">–í—Å–µ —Å—Å—ã–ª–∫–∏</option>
            {data.links.map((link) => (
              <option key={link.id} value={link.id}>
                {link.shortId} ({link.clicks} –∫–ª–∏–∫–æ–≤)
              </option>
            ))}
          </Select>
        </div>
      </div>

      {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <StatCard
          title="–í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤"
          value={data.overview.totalClicks.toLocaleString()}
          description="–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
          icon={<span className="text-2xl">üìä</span>}
        />
        <StatCard
          title="–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–∫–∏"
          value={data.overview.uniqueClicks.toLocaleString()}
          description={`${data.overview.uniqueRate}% –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞`}
          icon={<span className="text-2xl">üë•</span>}
        />
        <StatCard
          title="–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–∫–∏"
          value={data.overview.repeatClicks.toLocaleString()}
          description={`${100 - data.overview.uniqueRate}% –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞`}
          icon={<span className="text-2xl">üîÑ</span>}
        />
        <StatCard
          title="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏"
          value={`${data.overview.uniqueRate}%`}
          description="–î–æ–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
          icon={<span className="text-2xl">‚ú®</span>}
        />
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* –ì–µ–æ–≥—Ä–∞—Ñ–∏—è */}
        <Card>
          <CardHeader>
            <CardTitle>–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</CardTitle>
            <CardDescription>–¢–æ–ø —Å—Ç—Ä–∞–Ω –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–µ—Ä–µ—Ö–æ–¥–æ–≤</CardDescription>
          </CardHeader>
          <CardContent>
            {data.geography.countries.length > 0 ? (
              <SimpleChart
                data={data.geography.countries.map(item => ({
                  label: item.country,
                  value: item.clicks
                }))}
                title=""
                type="bar"
              />
            ) : (
              <p className="text-gray-500 text-center py-8">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏</p>
            )}
          </CardContent>
        </Card>

        {/* –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ */}
        <Card>
          <CardHeader>
            <CardTitle>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞</CardTitle>
            <CardDescription>–û—Ç–∫—É–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</CardDescription>
          </CardHeader>
          <CardContent>
            {data.trafficSources.categories.length > 0 ? (
              <SimpleChart
                data={data.trafficSources.categories.map(item => ({
                  label: item.source,
                  value: item.count
                }))}
                title=""
                type="pie"
              />
            ) : (
              <p className="text-gray-500 text-center py-8">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö</p>
            )}
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ */}
        <Card>
          <CardHeader>
            <CardTitle>–ë—Ä–∞—É–∑–µ—Ä—ã –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</CardTitle>
            <CardDescription>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {data.technology.browsers.length > 0 && (
              <div>
                <h4 className="font-medium text-gray-900 mb-3">–ë—Ä–∞—É–∑–µ—Ä—ã</h4>
                <div className="space-y-2">
                  {data.technology.browsers.slice(0, 5).map((browser) => (
                    <ProgressBar
                      key={browser.browser}
                      label={browser.browser}
                      value={browser.clicks}
                      max={Math.max(...data.technology.browsers.map(b => b.clicks)) || 1}
                    />
                  ))}
                </div>
              </div>
            )}
            
            {data.technology.devices.length > 0 && (
              <div>
                <h4 className="font-medium text-gray-900 mb-3">–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</h4>
                <div className="space-y-2">
                  {data.technology.devices.map((device) => (
                    <ProgressBar
                      key={device.device}
                      label={device.device === 'mobile' ? '–ú–æ–±–∏–ª—å–Ω—ã–µ' : device.device === 'desktop' ? '–ö–æ–º–ø—å—é—Ç–µ—Ä—ã' : '–ü–ª–∞–Ω—à–µ—Ç—ã'}
                      value={device.clicks}
                      max={Math.max(...data.technology.devices.map(d => d.clicks)) || 1}
                    />
                  ))}
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        {/* UTM –∫–∞–º–ø–∞–Ω–∏–∏ */}
        <Card>
          <CardHeader>
            <CardTitle>UTM –∫–∞–º–ø–∞–Ω–∏–∏</CardTitle>
            <CardDescription>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º</CardDescription>
          </CardHeader>
          <CardContent>
            {data.utm.campaigns.length > 0 ? (
              <div className="space-y-3">
                {data.utm.campaigns.slice(0, 10).map((campaign, index) => (
                  <div key={index} className="border-b border-gray-100 pb-2">
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <p className="font-medium text-gray-900">
                          {campaign.campaign !== 'N/A' ? campaign.campaign : '–ë–µ–∑ –∫–∞–º–ø–∞–Ω–∏–∏'}
                        </p>
                        <p className="text-sm text-gray-500">
                          {campaign.source !== 'N/A' && `–ò—Å—Ç–æ—á–Ω–∏–∫: ${campaign.source}`}
                          {campaign.medium !== 'N/A' && ` ‚Ä¢ –ö–∞–Ω–∞–ª: ${campaign.medium}`}
                        </p>
                      </div>
                      <span className="text-sm font-medium text-gray-900">
                        {campaign.clicks}
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-gray-500 text-center py-8">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ UTM –º–µ—Ç–∫–∞—Ö</p>
            )}
          </CardContent>
        </Card>
      </div>

      {/* –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä—ã */}
      {data.trafficSources.referers.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>–¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤</CardTitle>
            <CardDescription>–°–∞–π—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {data.trafficSources.referers.slice(0, 10).map((referer, index) => (
                <div key={index} className="flex justify-between items-center py-2 border-b border-gray-100">
                  <span className="text-gray-900">{referer.domain}</span>
                  <span className="text-sm font-medium text-gray-600">{referer.clicks} –∫–ª–∏–∫–æ–≤</span>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
